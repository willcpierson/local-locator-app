/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("function removeAllChildNodes(parent) {\n  if (parent) {\n    const invalidStateWarning = document.getElementById('invalidState');\n\n    if (invalidStateWarning) {\n      if (invalidStateWarning.dataset.remove === \"visible\") {\n        invalidStateWarning.dataset.remove = \"\";\n      } else {\n        invalidStateWarning.remove();\n      }\n    }\n\n    const invalidGameWarning = document.getElementById('invalidGame');\n\n    if (invalidGameWarning) {\n      if (invalidGameWarning.dataset.remove === \"visible\") {\n        invalidGameWarning.dataset.remove = \"\";\n      } else {\n        invalidGameWarning.remove();\n      }\n    }\n\n    const noTournamentsLocated = document.getElementById('noTournaments');\n\n    if (noTournamentsLocated) {\n      if (noTournamentsLocated.dataset.remove === \"visible\") {\n        noTournamentsLocated.remove();\n      } else {\n        noTournamentsLocated.dataset.remove = \"\";\n      }\n    }\n\n    const loadingScreen = document.getElementById('loadingScreen');\n\n    if (loadingScreen) {\n      if (loadingScreen.dataset.remove === \"visible\") {\n        loadingScreen.remove();\n      } else {\n        loadingScreen.dataset.remove = \"\";\n      }\n    }\n\n    while (parent.firstChild) {\n      parent.removeChild(parent.firstChild);\n    }\n\n    ;\n  }\n}\n\n;\n\nArray.prototype.quickSort = function (callback) {\n  if (this.length < 2) return this;\n\n  if (!callback) {\n    callback = (x, y) => {\n      if (x < y) return -1;\n      return 1;\n    };\n  }\n\n  const pivot = this[0];\n  let left = this.slice(1).filter(ele => callback(ele, pivot) === -1);\n  let right = this.slice(1).filter(ele => callback(ele, pivot) !== -1);\n  left = left.quickSort(callback);\n  right = right.quickSort(callback);\n  return left.concat([pivot]).concat(right);\n};\n\nconst numPeriods = 3;\nconst intervalTime = 500;\n\nfunction showLoadingMessage() {\n  let count = 0;\n  const tourneyListHolder = document.getElementById('tourney-list');\n  return setInterval(() => {\n    count++;\n    const periods = \".\".repeat(count % (numPeriods + 1));\n    tourneyListHolder.innerHTML = `\n      <ol id=\"tournament-listings\">\n      </ol><p class=\"tourney-list-holder\" id=\"loadingScreen\" data-remove=\"visible\">Loading${periods}</p>\n    `;\n  }, intervalTime);\n}\n\nasync function requestGameIds() {\n  let fetchedGameIds;\n\n  try {\n    let res = await fetch('https://api.start.gg/gql/alpha', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer a5111b54ba7fb17a3ec32d30ce67ab80'\n      },\n      body: JSON.stringify({\n        \"query\": \"query VideogamesQuery {\\n  videogames(query: {\\n    page: 1\\n    perPage: 500\\n    filter: {\\n      id: null\\n    }\\n  }) {\\n    pageInfo {\\n      total\\n      totalPages\\n      page\\n      perPage\\n    }\\n    nodes {\\n      id\\n      name\\n      displayName\\n      images {\\n        type\\n        width\\n        height\\n        url\\n      }\\n    }\\n  }\\n}\",\n        \"variables\": {\n          \"perPage\": 500\n        },\n        \"operationName\": \"VideogamesQuery\"\n      })\n    });\n\n    if (!res.ok) {\n      throw new Error('Start.gg token is currently being overworked, try again in a few minutes!');\n    }\n\n    fetchedGameIds = await res.json();\n    let games = fetchedGameIds.data.videogames.nodes;\n    games.forEach(gameObject => {\n      const gameMenu = document.querySelector(\"#gameList\");\n      let gameOption = gameMenu.appendChild(document.createElement('option'));\n      gameOption.innerHTML = `${gameObject.name}`;\n      gameOption.setAttribute('id', gameObject.id);\n      gameOption.setAttribute('value', gameObject.name);\n      gameOption.setAttribute('data-gameid', gameObject.name);\n      console.log(gameObject);\n      console.log(gameOption);\n      console.log(gameOption.dataset.gameid);\n    });\n    return games;\n  } catch (error) {\n    console.error('There was a problem receiving the game IDs, try again later', error);\n  }\n}\n\n;\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  requestGameIds();\n  const inputGame = document.getElementById('game');\n  console.log(inputGame); // inputGame.addEventListener(change, () => {\n  //   const selectedOption = document.querySelector(`#gameList option[value=\"${inputGame.value}\"]`)\n  //   console.log(selectedOption)\n  //   console.log('CHANGED!')\n  //   if (selectedOption) {\n  //     inputGame.dataset.gameid = selectedOption.id;\n  //   }\n  // })\n\n  document.getElementById(\"search-for-tournies-button\").addEventListener('click', event => {\n    event.preventDefault();\n    const allGames = document.querySelectorAll(\"option\");\n    console.log(allGames);\n\n    function findGameId(options) {\n      const gameName = document.getElementById(\"game\").value;\n      let foundId = null;\n      options.forEach(option => {\n        if (option.outerText === gameName) {\n          console.log(`found ID: ${option.id}`);\n          foundId = parseInt(option.id);\n        }\n      });\n      return foundId;\n    }\n\n    ;\n    findGameId(allGames);\n    const findTournament = {\n      game: findGameId(allGames),\n      state: document.getElementById(\"state\").value\n    };\n    const inputtedGame = findTournament.game;\n    const inputtedState = findTournament.state;\n    console.log(findTournament);\n    const tournamentList = document.querySelector(\"#tournament-listings\");\n\n    async function requestStartApi(state, game) {\n      // const loadingInterval = showLoadingMessage();\n      // await new Promise(resolve => setTimeout(resolve, 5000));\n      try {\n        const res = await fetch('https://api.start.gg/gql/alpha', {\n          method: 'POST',\n          headers: {\n            Authorization: 'Bearer a5111b54ba7fb17a3ec32d30ce67ab80'\n          },\n          body: JSON.stringify({\n            \"query\": `query TournamentsByState($perPage: Int, $state: String!, $videogameId: ID!) {\\n  tournaments(query: {\\n    perPage: $perPage\\n    filter: {\\n      upcoming: true\\n      addrState: $state\\n      videogameIds: [\\n        $videogameId\\n      ]\\n    }\\n  }) {\\n    nodes {\\n      name\\n      addrState\\n      slug\\n      venueAddress\\n      isRegistrationOpen\\n      startAt\\n      events(filter: {\\n        videogameId: ${game}\\n      }) {\\n        id\\n        name\\n        numEntrants\\n      }\\n    }\\n  }\\n}`,\n            \"variables\": {\n              \"perPage\": 50,\n              \"state\": state.toUpperCase(),\n              \"videogameId\": game\n            },\n            \"operationName\": \"TournamentsByState\"\n          })\n        }); // clearInterval(loadingInterval);\n        // console.log('Interval Passed');\n        // const loadingScreen = document.getElementById('loadingScreen');\n        // loadingScreen.remove();\n\n        if (!res.ok) {\n          throw new Error('Local Locator is experiencing some high traffic, please try again later!');\n        }\n\n        const fetchedData = await res.json();\n        const tournamentArray = fetchedData.data.tournaments.nodes;\n\n        if (tournamentArray.length <= 0) {\n          const tourneyListHolder = document.getElementById('tourney-list');\n          tourneyListHolder.innerHTML = `\n          <ol id=\"tournament-listings\">\n          </ol><p class=\"tourney-list-holder\" id=\"noTournaments\" data-remove=\"visible\">No Tournaments Located!</p>\n          `;\n        } else {\n          console.log('displaying tournaments...');\n          tournamentArray.forEach((tournament, i) => {\n            if (!tournament.events[0]) {\n              return;\n            }\n\n            let entrantCount;\n\n            if (!tournament.events[0].numEntrants) {\n              entrantCount = `Hidden`;\n            } else {\n              entrantCount = tournament.events[0].numEntrants;\n            }\n\n            setTimeout(() => {\n              const tourney = tournamentList.appendChild(document.createElement('li'));\n\n              const tournamentEvents = () => {\n                let gameEvents = ``;\n                tournament.events.forEach((event, i) => {\n                  if (i < tournament.events.length - 1) {\n                    gameEvents += JSON.stringify(event) + ', ';\n                  } else {\n                    gameEvents += JSON.stringify(event);\n                  }\n                });\n                return `[` + gameEvents + `]`;\n              };\n\n              let textOfEvents = \"\";\n\n              const tournamentEventsText = () => {\n                let gameEvents = ``;\n                tournament.events.forEach((event, i) => {\n                  let numberOfEntrants;\n\n                  if (event.numEntrants == null) {\n                    numberOfEntrants = 'Hidden';\n                  } else {\n                    numberOfEntrants = event.numEntrants;\n                  }\n\n                  if (i < tournament.events.length - 1) {\n                    textOfEvents += `${event.name}: ${numberOfEntrants} <i class=\"fa-solid fa-user\"></i> | `;\n                  } else {\n                    textOfEvents += `${event.name}: ${numberOfEntrants} <i class=\"fa-solid fa-user\"></i>`;\n                  }\n                });\n                return `[` + gameEvents + `]`;\n              };\n\n              const tourneyDate = new Date(tournament.startAt * 1000);\n              const day = tourneyDate.getDate();\n              const month = tourneyDate.getMonth();\n              const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n              const year = tourneyDate.getFullYear();\n              tournamentEventsText();\n              tourney.setAttribute('data-events', tournamentEvents());\n              tourney.innerHTML = `\n                <h2 class='tournament-text-name'>${tournament.name} </h2> <p class='tournament-date'>${monthNames[month]} ${day}, ${year}</p><p class='tournament-text-name'> ${textOfEvents} </p> <br /> ${tournament.venueAddress} <a href=\"https://www.start.gg/${tournament.slug}\" target=\"_blank\" id='reg-button'>Register</a>\n                `;\n            }, 50 * i);\n          });\n        }\n\n        return fetchedData;\n      } catch (error) {\n        console.error('There was a problem with the fetch request', error);\n      }\n    }\n\n    function validateForm() {\n      const gameInput = document.getElementById('game');\n      const stateInput = document.getElementById('state');\n      const gameDataList = document.getElementById('gameList');\n      const stateDataList = document.getElementById('stateList');\n      const stateOptions = Array.from(stateDataList.options).map(option => option.value);\n      const gameOptions = Array.from(gameDataList.options).map(option => option.value);\n\n      if (!stateOptions.includes(stateInput.value)) {\n        const tourneyListHolder = document.getElementById('tourney-list');\n        tourneyListHolder.innerHTML = `\n        <ol id=\"tournament-listings\">\n        </ol><p class=\"tourney-list-holder\" id=\"invalidState\" data-remove=\"visible\">Please input a valid state.</p>\n        `;\n      } else if (!gameOptions.includes(gameInput.value)) {\n        const tourneyListHolder = document.getElementById('tourney-list');\n        tourneyListHolder.innerHTML = `\n        <ol id=\"tournament-listings\">\n        </ol><p class=\"tourney-list-holder\" id=\"invalidGame\" data-remove=\"visible\">Please input a valid game.</p>\n        `;\n      } else {\n        fetchedTournaments = requestStartApi(inputtedState, inputtedGame);\n      }\n    }\n\n    validateForm();\n    removeAllChildNodes(tournamentList);\n  });\n}); // Bar Graph\n\nfunction addData(chart, label, data) {\n  // received from chart.js website\n  chart.data.labels.push(label);\n  chart.data.datasets.forEach(dataset => {\n    dataset.data.push(data);\n  });\n  chart.update();\n}\n\nfunction resetChart(chartValueArray) {\n  while (chartValueArray.length > 0) {\n    chartValueArray.pop();\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const ctx = document.getElementById('myChart').getContext('2d');\n  const xAxisNames = [];\n  const chartValues = [];\n  const myChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: xAxisNames,\n      // push tourney names into this array\n      datasets: [{\n        label: 'Entrant Count',\n        //What data we are givng; entrant count, reoccurence, etc.\n        data: chartValues,\n        //push entrants into this array\n        backgroundColor: [// repeat this every loop, push into array\n        'rgba(54, 162, 235)', 'rgba(54, 162, 235)'],\n        borderColor: [// repeat this every loop, push into array\n        'rgba(54, 162, 235, 1)', 'rgba(54, 162, 235, 1)'],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      indexAxis: 'y',\n      scales: {\n        y: {\n          beginAtZero: true\n        },\n        x: {\n          suggestedMin: 10,\n          suggestedMax: 50\n        }\n      }\n    }\n  });\n  const tourneyList = document.querySelector(\"ol\");\n  tourneyList.addEventListener('click', event => {\n    resetChart(chartValues);\n    resetChart(xAxisNames);\n    const tournamentAttendeeList = document.querySelector(\"#all-attendees\");\n    const events = event.target.dataset.events;\n\n    const eventDetails = () => {\n      JSON.parse(events).forEach(event => {\n        addData(myChart, `${event.name}`, `${event.numEntrants}`);\n      });\n    };\n\n    eventDetails();\n    removeAllChildNodes(tournamentAttendeeList);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;